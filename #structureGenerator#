#! /usr/bin/env python
#code will generate random configurations of two ORCA optimized molecules, calculate single point energies of them, dump the lowest energy structures in the structure input directory for orca geometry optimizations, and cause binding energy tracker to run when the structures have all been dumped.

import subprocess
import readline
import numpy as np
from re import sub
import shutil
import time

#allow user selection of two structures for which to generate configurations
control = 0
while (control != 1):
    print('Choose two structures for configuration generation by typing the corresponding numbers\nseparated by a space. Type the number of the analyte molecule first.\n')
    time.sleep(0.006)
    ssloc = '/ihome/kjohnson/jpr54/orca/geometryOptimizations/singleMolecules/'
    singleStructures = subprocess.Popen('ls {0}'.format(ssloc), stdout=subprocess.PIPE, shell=True)
    singleStructureLines = singleStructures.communicate()[0].split()
    print('The following structures are available:\n')
    for i, line in enumerate(singleStructureLines):
        print('{0}: {1}'.format(i, line))
    time.sleep(0.006)
    structureNumbers = raw_input('\nFor example: 0 1 for {0} and {1}\n'.format(singleStructureLines[0], singleStructureLines[1]))
    structureNumberList = np.unique(np.array([int(s) for s in structureNumbers.split() if s.isdigit()]))
    #determine if entry is valid
    if (structureNumberList.size == 2):
        control = 1
    else:
        print('Invalid entry. Try again.\n')
        time.sleep(0.006)
        subprocess.Popen('clear')
        control = 2

#create name of the configuration
tempNameDir = singleStructureLines[structureNumberList[0]] + '_' + singleStructureLines[structureNumberList[1]]
#print('{0}'.format(tempNameDir))

#Check to see if there is already a directory with this configuration in the abcluster directory before making a new one. Append a number if there is.
dirs = subprocess.Popen('ls /ihome/kjohnson/jpr54/abcluster/', stdout=subprocess.PIPE, shell=True)
dirList = dirs.communicate()[0]
if (tempNameDir not in dirList):
    subprocess.Popen('mkdir {0}'.format(tempNameDir), cwd='/ihome/kjohnson/jpr54/abcluster/', shell=True)
    time.sleep(0.006)
    subprocess.Popen('mkdir 1', cwd='/ihome/kjohnson/jpr54/abcluster/'+tempNameDir+'/', shell=True)
    tempNameDirNum = tempNameDir+'/1/'
else:
    nums = subprocess.Popen('ls /ihome/kjohnson/jpr54/abcluster/'+tempNameDir+'/', stdout=subprocess.PIPE, shell=True)
    numbers = nums.communicate()[0].split()
    maxNum = len(numbers)
    subprocess.Popen('mkdir {0}'.format(maxNum+1), cwd='/ihome/kjohnson/jpr54/abcluster/'+tempNameDir+'/', shell=True)
    tempNameDirNum = tempNameDir+'/'+str(maxNum+1)+'/'

fullLocName = '/ihome/kjohnson/jpr54/abcluster/'+tempNameDirNum

#make the cluster file
time.sleep(0.008)
clusterFile = open(fullLocName+'{0}.cluster'.format(tempNameDir), 'w')
clusterFile.write('2\n')
clusterFile.write('{0}{1}/geometryOptimizationOrca.xyz\t1\n'.format(ssloc,singleStructureLines[structureNumberList[0]]))
clusterFile.write('{0}{1}/geometryOptimizationOrca.xyz\t1\n'.format(ssloc,singleStructureLines[structureNumberList[1]]))
clusterFile.close()

#determine the maximal dimension
min1a, min2a, min3a, max1a, max2a, max3a = 100.0,100.0,100.0,0,0,0
maxDiff1 = 0.0
structure1 = open('{0}{1}/geometryOptimizationOrca.xyz'.format(ssloc,singleStructureLines[structureNumberList[0]]), 'r')
#read the first two lines and trash them
trash = structure1.readline()
trash = structure1.readline()
lines = structure1.readlines()
for line in lines:
    #get minimum and maximum for all three columns
    if float(line.split()[1]) > max1a:
        max1a = float(line.split()[1])
    if float(line.split()[1]) < min1a:
        min1a = float(line.split()[1])
    if float(line.split()[2]) > max2a:
        max2a = float(line.split()[2])
    if float(line.split()[2]) < min2a:
        min2a = float(line.split()[2])
    if float(line.split()[3]) > max3a:
        max3a = float(line.split()[3])
    if float(line.split()[3]) < min3a:
        min3a = float(line.split()[3])
maxDiff1 = max(max1a,max2a,max3a) - min(min1a,min2a,min3a)
#second structure
min1b, min2b, min3b, max1b, max2b, max3b = 100.0,100.0,100.0,0,0,0
maxDiff2 = 0.0
structure2 = open('{0}{1}/geometryOptimizationOrca.xyz'.format(ssloc,singleStructureLines[structureNumberList[1]]), 'r')
#read the first two lines and trash them
trash = structure2.readline()
trash = structure2.readline()
lines = structure2.readlines()
for line in lines:
    #get minimum and maximum for all three columns
    if float(line.split()[1]) > max1b:
        max1b = float(line.split()[1])
    if float(line.split()[1]) < min1b:
        min1b = float(line.split()[1])
    if float(line.split()[2]) > max2b:
        max2b = float(line.split()[2])
    if float(line.split()[2]) < min2b:
        min2b = float(line.split()[2])
    if float(line.split()[3]) > max3b:
        max3b = float(line.split()[3])
    if float(line.split()[3]) < min3b:
        min3b = float(line.split()[3])
maxDiff2 = max(max1b,max2b,max3b) - min(min1b,min2b,min3b)
totalDif = 1.5*(maxDiff1 + maxDiff2)

#write mol.inp file
molFile = open(fullLocName+'mol.inp','w')
molFile.write('{0}\n'.format(tempNameDir))
molFile.write('{0}.cluster\n'.format(tempNameDir))
molFile.write('cube 1.0 {0} {0} {0}\n'.format(totalDif))
molFile.write('100\n')
molFile.write('>>>>\n')
molFile.write('oa $xxx$ $inp$ $out$\n')
molFile.write('>>>>\n')
molFile.close()

#write the job submission file
jobFile = open(fullLocName+'job.pbs','w')
jobFile.write('#!/bin/bash\n\n')
jobFile.write('#PBS -N "{0}"\n'.format(tempNameDir))
jobFile.write('#PBS -r n\n')
jobFile.write('#PBS -q one_day\n')
jobFile.write('#PBS -l nodes=1:ppn=8\n')
jobFile.write('#PBS -l walltime=24:00:00\n')
jobFile.write('#PBS -j oe\n\n')
jobFile.write('cd $PBS_O_WORKDIR\n')
jobFile.write('module purge\n')
jobFile.write('module load orca/3.0.2\n')
jobFile.write('cd $SCRATCH\n')
jobFile.write('cp $PBS_O_WORKDIR/* $SCRATCH/\n\n')
jobFile.write('run_on_exit(){\n')
jobFile.write('    cp -R $SCRATCH/* $PBS_O_WORKDIR/\n')
jobFile.write('    cd $PBS_O_WORKDIR/\n')
#after the calculation finishes, get the numbers of the ten best structures
jobFile.write('    result=$(grep -A 13 "Reordered from low to high" mol.out | tail -n 10 | cut -d ' ' -f 5)\n')
jobFile.write('    for i in $result; do mv ./{0}-LM/$i.xyz /ihone/kjohnson/jpr54/orca/geometryOptimizations/structureInputs    

jobFile.write('}\n\n')
jobFile.write('trap run_on_exit EXIT\n')
jobFile.write('/ihome/kjohnson/jpr54/ABCluster-Linux/lego mol.inp > mol.out\n\n')

